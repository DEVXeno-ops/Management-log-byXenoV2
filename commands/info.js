const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const si = require('systeminformation');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
const logError = (error, context) => {
  console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô:', context);
  console.error('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  console.error('Stack trace:', error.stack);
};

module.exports = {
  data: new SlashCommandBuilder()
    .setName('info')
    .setDescription('‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÅ‡∏ö‡∏ö real-time'),

  async execute(interaction) {
    try {
      await interaction.deferReply(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô interaction timeout

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      const { user: bot, guilds, users, ws, uptime } = interaction.client;
      const guildCount = guilds.cache.size;
      const userCount = users.cache.size;
      const ping = ws.ping;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
      const [systemData, cpuLoad, diskData] = await Promise.all([
        si.mem(),
        si.currentLoad(),
        si.fsSize(),
      ]);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
      const totalRAM = (systemData.total / 1024 / 1024 / 1024).toFixed(2);
      const usedRAM = ((systemData.total - systemData.free) / 1024 / 1024 / 1024).toFixed(2);
      const diskUsed = (diskData[0].used / 1024 / 1024 / 1024).toFixed(2);
      const diskTotal = (diskData[0].size / 1024 / 1024 / 1024).toFixed(2);
      const cpuPercentage = cpuLoad.currentLoad.toFixed(2);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó
      const botInfoEmbed = new EmbedBuilder()
        .setColor('#FF69B4')
        .setTitle(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó: ${bot.username}`)
        .setThumbnail(bot.displayAvatarURL({ dynamic: true }))
        .addFields(
          { name: 'üÜî ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó', value: bot.globalName || bot.username, inline: true },
          { name: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£', value: bot.createdAt.toISOString().split('T')[0], inline: true },
          { name: 'üí¨ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', value: bot.presence?.status ?? '‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', inline: true },
          { name: 'üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: `${userCount}`, inline: true },
          { name: 'üåê ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', value: `${guildCount}`, inline: true },
          { name: 'üì∂ Ping', value: `${ping} ms`, inline: true },
          { name: '‚è±Ô∏è ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß', value: `${new Date(uptime * 1000).toISOString().substr(11, 8)}`, inline: true },
          { name: 'üíæ RAM Usage', value: `${usedRAM}GB / ${totalRAM}GB`, inline: true },
          { name: 'üñ•Ô∏è CPU Usage', value: `${cpuPercentage}%`, inline: true },
          { name: 'üìÄ Disk Usage', value: `${diskUsed}GB / ${diskTotal}GB`, inline: true }
        )
        .setTimestamp()
        .setFooter({
          text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó Discord',
          iconURL: bot.displayAvatarURL({ dynamic: true })
        });

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
      await interaction.editReply({ embeds: [botInfoEmbed] });

    } catch (error) {
      logError(error, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó');
      await interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ!' });
    }
  },
};
